---
- name: Configure OCP 4 cluster
  hosts: localhost
  connection: local
  module_defaults:
    group/kubernetes.core.k8s:
      host: "{{ api_entrypoint }}"
      ca_cert: "{{ api_ca_cert }}"
  tasks:
    - name: Load user credentials for OCP
      include_vars: 
        file: group_vars/user_credentials.vault
      no_log: true
        #    - name: Log into OCP to obtain access token
        #      k8s_auth:
        #        host: "{{ api_entrypoint }}"
        #        validate_certs: false
        #        username: "{{ ocp_user }}"
        #        password: "{{ ocp_pass }}"
        #      register: _auth_result
    - name: Install GitOps operator
      include_role:
        name: argocd_install
      when: argocd_install | bool
      #    - name: Create sealed-secrets namespace
      #      k8s:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       api_version: "v1"
      #       kind: "Namespace"
      #       name: "sealed-secrets"
      #       state: present
      #    - name: Wait for sealed-secrets namespace to be ready
      #      k8s_info:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       api_version: "v1"
      #       kind: "Namespace"
      #       name: "sealed-secrets"
      #      register: _namespace_sealed_secrets
      #      until:
      #        -  _namespace_sealed_secrets.resources[0].status.phase is defined
      #        -  _namespace_sealed_secrets.resources[0].status.phase == "Active"
      #    - name: Add operator group
      #      k8s:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       src: ../Operators/SealedSecrets/operatorgroup.yaml
      #       state: "present"
      #    - name: Install Sealed Secrets operator
      #      k8s:
      #        api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #        src: ../Operators/SealedSecrets/subscription.yaml
      #        state: "present"
      #    - name: Get Cluster Service Version for Sealed Secrets operator
      #      k8s_info:
      #        api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #        api_version: operators.coreos.com/v1alpha1
      #        kind: "Subscription"
      #        name: "sealed-secrets-operator-helm"
      #        namespace: "sealed-secrets"
      #      register: _subscription_sealed
      #      until:
      #        - _subscription_sealed.resources[0].status.currentCSV is defined
      #      retries: 14
      #      delay: 4
      #    - name: Waiting for Sealed Secrets operator installation to succeed
      #      k8s_info:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       api_version: operators.coreos.com/v1alpha1
      #       kind: "ClusterServiceVersion"
      #       name: "{{ _subscription_sealed.resources[0].status.currentCSV }}"
      #       namespace: "sealed-secrets"
      #      register: _installed_sealed
      #      until:
      #        - _installed_sealed.resources[0].status.conditions[-1].phase is defined
      #        - _installed_sealed.resources[0].status.conditions[-1].phase == "Succeeded"
      #      retries: 24
      #      delay: 8
      #    - set_fact:
      #        SSC_image: "{{ _installed_sealed['resources'][0]['metadata']['annotations']['alm-examples'] | regex_search('repository\":.*?\"(.*?)\",', '\\1', multiline=True ) | first }}"
      #    - name: Create Sealed Secret Controller
      #      k8s:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       definition: "{{ lookup('template', '../Operators/SealedSecrets/sealedsecretcontrollerCR.yaml') }}"
      #       state: "present"
      #    - name: Waiting for Sealed Secret Controller to be ready
      #      k8s_info:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       api_version: bitnami.com/v1alpha1
      #       kind: "SealedSecretController"
      #       name: "sealedsecretcontroller"
      #       namespace: "sealed-secrets"
      #      register: _ssc_deployment
      #      until:
      #        - _ssc_deployment.resources[0].status.conditions[-1].type is defined
      #        - _ssc_deployment.resources[0].status.conditions[-1].type == "Deployed"
      #        - _ssc_deployment.resources[0].status.conditions[-1].status is defined
      #        - _ssc_deployment.resources[0].status.conditions[-1].status == "True"
      #        - _ssc_deployment.resources[0].status.conditions[-1].reason is defined
      #        - _ssc_deployment.resources[0].status.conditions[-1].reason == "InstallSuccessful"
      #      retries: 24
      #      delay: 8
      #    - name: Import Sealing keys
      #      k8s:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       definition: "{{ lookup('file', item) }}"
      #       state: "present"
      #      with_fileglob:
      #        - "../Operators/SealedSecrets/sealedKeys/*.yaml"
      #    - name: Get Sealed Secret Controller pod name
      #      k8s_info:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       kind: Pod
      #       namespace: "sealed-secrets"
      #       label_selectors:
      #        - app.kubernetes.io/instance = sealedsecretcontroller 
      #      register: _ssc_pod
      #    - name: Delete (restart) Sealed Secret Controller pod
      #      k8s:
      #       api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #       api_version: "v1"
      #       kind: Pod
      #       namespace: "sealed-secrets"
      #       name: "{{ _ssc_pod.resources[0]['metadata']['name'] }}"
      #       wait: yes
      #       state: absent
      #    - name: Log out to revoke access token
      #      k8s_auth:
      #        state: absent
      #        api_key: "{{ _auth_result.k8s_auth.api_key }}"
      #      when: _auth_result.k8s_auth.api_key is defined
...
